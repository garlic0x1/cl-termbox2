(defpackage :termbox2/snake
  (:use :cl :termbox2))
(in-package :termbox2/snake)

(defparameter +max-goals+ 8)

(defclass game ()
  ((snake
    :initform '((0 . 0))
    :accessor snake)
   (score
    :initform 1
    :accessor score)
   (goals
    :initform '()
    :accessor goals)
   (direction
    :initform :east
    :accessor direction)
   (exit
    :initform nil
    :accessor exit)))

(defun move-snake (game)
  (flet ((relative-cell (cell direction)
           (case direction
             (:north (cons (car cell) (1- (cdr cell))))
             (:south (cons (car cell) (1+ (cdr cell))))
             (:east (cons (1+ (car cell)) (cdr cell)))
             (:west (cons (1- (car cell)) (cdr cell)))
             (otherwise (error "Bad direction."))))
         (valid-cell (cell)
           (and (< (car cell) (tb-width))
                (< (cdr cell) (tb-height))
                (<= 0 (car cell))
                (<= 0 (cdr cell))
                (not (find cell (snake game) :test #'equal))))
         (eat-cell (cell)
           (when (find cell (goals game) :test #'equal)
             (setf (score game) (1+ (score game))
                   (goals game) (remove cell (goals game) :test #'equal)))
           (setf (snake game) (last (append (snake game) (list cell)) (score game)))))
    (let ((next (relative-cell (car (last (snake game))) (direction game))))
      (if (valid-cell next)
          (eat-cell next)
          (setf (exit game) t)))))

(defun game-loop (game)
  (flet ((render (game)
           (tb-clear)
           (dolist (cell (snake game))
             (tb-print (car cell) (cdr cell) +tb-white+ +tb-red+ "s"))
           (dolist (goal (goals game))
             (tb-print (car goal) (cdr goal) +tb-cyan+ +tb-yellow+ "g"))
           (tb-present))
         (get-input (game)
           (setf (direction game)
                 (let ((k (tb-event-key (tb-peek-event 1000))))
                   (cond ((= k +tb-key-arrow-up+) :north)
                         ((= k +tb-key-arrow-down+) :south)
                         ((= k +tb-key-arrow-right+) :east)
                         ((= k +tb-key-arrow-left+) :west)
                         (t (direction game))))))
         (spawn-goal (game)
           (when (> +max-goals+ (length (goals game)))
             (let ((x (random (tb-width)))
                   (y (random (tb-height))))
               (push (cons x y) (goals game))))))
    (spawn-goal game)
    (move-snake game)
    (render game)
    (unless (exit game)
      (get-input game)
      (game-loop game))))

(defun main ()
  (tb-init)
  (let ((game (make-instance 'game)))
    (game-loop game)
    (tb-shutdown)
    (format t "Game over.~%Score: ~a~%" (score game))))
